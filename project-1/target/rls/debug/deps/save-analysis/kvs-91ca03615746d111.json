{"config":{"output_file":null,"full_docs":false,"pub_only":false,"reachable_only":false,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/mnt/c/Users/AresL/Desktop/PNA-Rust/project-1","program":"/home/lsy/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":[],"output":"/mnt/c/Users/AresL/Desktop/PNA-Rust/project-1/target/rls/debug/deps/libkvs-91ca03615746d111.rmeta"},"prelude":{"crate_id":{"name":"kvs","disambiguator":[9589529918752262820,8612395260711882652]},"crate_root":"src","external_crates":[{"file_name":"/mnt/c/Users/AresL/Desktop/PNA-Rust/project-1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[6528836112941390771,2028724122443642861]}},{"file_name":"/mnt/c/Users/AresL/Desktop/PNA-Rust/project-1/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[14673858572786541001,1892137737928154225]}},{"file_name":"/mnt/c/Users/AresL/Desktop/PNA-Rust/project-1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[17117278319981904138,16406771668640906211]}},{"file_name":"/mnt/c/Users/AresL/Desktop/PNA-Rust/project-1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[11917984669602857069,6489053565454986112]}},{"file_name":"/mnt/c/Users/AresL/Desktop/PNA-Rust/project-1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[12362109612685904499,382626321872987168]}},{"file_name":"/mnt/c/Users/AresL/Desktop/PNA-Rust/project-1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4151571022625212401,1888722734493896023]}},{"file_name":"/mnt/c/Users/AresL/Desktop/PNA-Rust/project-1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[4322023011642103678,14222697504055880771]}},{"file_name":"/mnt/c/Users/AresL/Desktop/PNA-Rust/project-1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[8420579222726968489,9136630199856205157]}},{"file_name":"/mnt/c/Users/AresL/Desktop/PNA-Rust/project-1/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[13745492306750544571,5475822973716876235]}},{"file_name":"/mnt/c/Users/AresL/Desktop/PNA-Rust/project-1/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[14030493773096865675,2651053314204399788]}},{"file_name":"/mnt/c/Users/AresL/Desktop/PNA-Rust/project-1/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[8310449678941769819,14748581810882876583]}},{"file_name":"/mnt/c/Users/AresL/Desktop/PNA-Rust/project-1/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[17983290995241619958,6056021938633518527]}},{"file_name":"/mnt/c/Users/AresL/Desktop/PNA-Rust/project-1/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[2836549575564442446,8627689666430273126]}},{"file_name":"/mnt/c/Users/AresL/Desktop/PNA-Rust/project-1/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[7274711288869898279,15671112109327640352]}},{"file_name":"/mnt/c/Users/AresL/Desktop/PNA-Rust/project-1/src/lib.rs","num":15,"id":{"name":"test","disambiguator":[4446151406936268180,10202046116082475817]}},{"file_name":"/mnt/c/Users/AresL/Desktop/PNA-Rust/project-1/src/lib.rs","num":16,"id":{"name":"getopts","disambiguator":[13638865133301912677,190615245680655733]}},{"file_name":"/mnt/c/Users/AresL/Desktop/PNA-Rust/project-1/src/lib.rs","num":17,"id":{"name":"rustc_std_workspace_std","disambiguator":[12720600221699617626,8854304494355641952]}},{"file_name":"/mnt/c/Users/AresL/Desktop/PNA-Rust/project-1/src/lib.rs","num":18,"id":{"name":"unicode_width","disambiguator":[12428049756781662742,7011376730832474764]}},{"file_name":"/mnt/c/Users/AresL/Desktop/PNA-Rust/project-1/src/lib.rs","num":19,"id":{"name":"term","disambiguator":[6803460127535859698,16610178408181764835]}}],"span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":98,"line_start":1,"line_end":5,"column_start":1,"column_end":8}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":6},"span":{"file_name":"src/lib.rs","byte_start":81,"byte_end":88,"line_start":3,"line_end":3,"column_start":13,"column_end":20},"alias_span":null,"name":"KvStore","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":1,"index":6207},"span":{"file_name":"src/kv.rs","byte_start":121,"byte_end":128,"line_start":1,"line_end":1,"column_start":23,"column_end":30},"alias_span":null,"name":"HashMap","value":"","parent":{"krate":0,"index":4}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":98,"line_start":1,"line_end":5,"column_start":1,"column_end":8},"name":"","qualname":"::","value":"src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":13}],"decl_id":null,"docs":" this crate is use to store key-value pair\n","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":22,"line_start":1,"line_end":1,"column_start":1,"column_end":23}},{"value":"! this crate is use to store key-value pair","span":{"file_name":"src/lib.rs","byte_start":23,"byte_end":68,"line_start":2,"line_end":2,"column_start":1,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":4},"span":{"file_name":"src/kv.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"kv","qualname":"::kv","value":"src/kv.rs","parent":null,"children":[{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":8}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6},"span":{"file_name":"src/kv.rs","byte_start":225,"byte_end":232,"line_start":5,"line_end":5,"column_start":12,"column_end":19},"name":"KvStore","qualname":"::kv::KvStore","value":"KvStore { map }","parent":null,"children":[{"krate":0,"index":7}],"decl_id":null,"docs":" the `KvStore` using a hashmap to store value in the memory\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":"src/kv.rs","byte_start":131,"byte_end":150,"line_start":3,"line_end":3,"column_start":1,"column_end":20}},{"value":"/ the `KvStore` using a hashmap to store value in the memory","span":{"file_name":"src/kv.rs","byte_start":151,"byte_end":213,"line_start":4,"line_end":4,"column_start":1,"column_end":63}}]},{"kind":"Field","id":{"krate":0,"index":7},"span":{"file_name":"src/kv.rs","byte_start":239,"byte_end":242,"line_start":6,"line_end":6,"column_start":5,"column_end":8},"name":"map","qualname":"::kv::KvStore::map","value":"std::collections::HashMap<std::string::String, std::string::String>","parent":{"krate":0,"index":6},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":9},"span":{"file_name":"src/kv.rs","byte_start":485,"byte_end":488,"line_start":19,"line_end":19,"column_start":12,"column_end":15},"name":"new","qualname":"<KvStore>::new","value":"fn () -> KvStore","parent":null,"children":[],"decl_id":null,"docs":" This method used to create a KvStore\n \n # Example\n \n ```rust\n use kvs::KvStore;\n \n let mut _kvstore = KvStore::new();\n ```\n","sig":null,"attributes":[{"value":"/ This method used to create a KvStore","span":{"file_name":"src/kv.rs","byte_start":291,"byte_end":331,"line_start":10,"line_end":10,"column_start":5,"column_end":45}},{"value":"/ ","span":{"file_name":"src/kv.rs","byte_start":336,"byte_end":340,"line_start":11,"line_end":11,"column_start":5,"column_end":9}},{"value":"/ # Example","span":{"file_name":"src/kv.rs","byte_start":345,"byte_end":358,"line_start":12,"line_end":12,"column_start":5,"column_end":18}},{"value":"/ ","span":{"file_name":"src/kv.rs","byte_start":363,"byte_end":367,"line_start":13,"line_end":13,"column_start":5,"column_end":9}},{"value":"/ ```rust","span":{"file_name":"src/kv.rs","byte_start":372,"byte_end":383,"line_start":14,"line_end":14,"column_start":5,"column_end":16}},{"value":"/ use kvs::KvStore;","span":{"file_name":"src/kv.rs","byte_start":388,"byte_end":409,"line_start":15,"line_end":15,"column_start":5,"column_end":26}},{"value":"/ ","span":{"file_name":"src/kv.rs","byte_start":414,"byte_end":418,"line_start":16,"line_end":16,"column_start":5,"column_end":9}},{"value":"/ let mut _kvstore = KvStore::new();","span":{"file_name":"src/kv.rs","byte_start":423,"byte_end":461,"line_start":17,"line_end":17,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"src/kv.rs","byte_start":466,"byte_end":473,"line_start":18,"line_end":18,"column_start":5,"column_end":12}}]},{"kind":"Local","id":{"krate":0,"index":4294967247},"span":{"file_name":"src/kv.rs","byte_start":1132,"byte_end":1136,"line_start":39,"line_end":39,"column_start":21,"column_end":25},"name":"self","qualname":"<KvStore>::set::self","value":"&mut kv::KvStore","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Local","id":{"krate":0,"index":4294967243},"span":{"file_name":"src/kv.rs","byte_start":1138,"byte_end":1141,"line_start":39,"line_end":39,"column_start":27,"column_end":30},"name":"key","qualname":"<KvStore>::set::key","value":"std::string::String","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Local","id":{"krate":0,"index":4294967239},"span":{"file_name":"src/kv.rs","byte_start":1151,"byte_end":1156,"line_start":39,"line_end":39,"column_start":40,"column_end":45},"name":"value","qualname":"<KvStore>::set::value","value":"std::string::String","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":10},"span":{"file_name":"src/kv.rs","byte_start":1123,"byte_end":1126,"line_start":39,"line_end":39,"column_start":12,"column_end":15},"name":"set","qualname":"<KvStore>::set","value":"fn (&mut self, key: String, value: String) -> ()","parent":null,"children":[],"decl_id":null,"docs":" This method used to set a new key-value pair,\n It can also be used to update the value of a key\n \n # Example\n \n ```rust\n use kvs::KvStore;\n \n let mut kvstore = KvStore::new();\n kvstore.set(\"key01\".to_owned(), \"value01\".to_owned());\n assert_eq!(kvstore.get(\"key01\".to_owned()), Some(\"value01\".to_owned()));\n kvstore.set(\"key01\".to_owned(), \"value02\".to_owned());\n assert_eq!(kvstore.get(\"key01\".to_owned()), Some(\"value02\".to_owned()));\n ```\n","sig":null,"attributes":[{"value":"/ This method used to set a new key-value pair,","span":{"file_name":"src/kv.rs","byte_start":576,"byte_end":625,"line_start":25,"line_end":25,"column_start":5,"column_end":54}},{"value":"/ It can also be used to update the value of a key","span":{"file_name":"src/kv.rs","byte_start":630,"byte_end":682,"line_start":26,"line_end":26,"column_start":5,"column_end":57}},{"value":"/ ","span":{"file_name":"src/kv.rs","byte_start":687,"byte_end":691,"line_start":27,"line_end":27,"column_start":5,"column_end":9}},{"value":"/ # Example","span":{"file_name":"src/kv.rs","byte_start":696,"byte_end":709,"line_start":28,"line_end":28,"column_start":5,"column_end":18}},{"value":"/ ","span":{"file_name":"src/kv.rs","byte_start":714,"byte_end":718,"line_start":29,"line_end":29,"column_start":5,"column_end":9}},{"value":"/ ```rust","span":{"file_name":"src/kv.rs","byte_start":723,"byte_end":734,"line_start":30,"line_end":30,"column_start":5,"column_end":16}},{"value":"/ use kvs::KvStore;","span":{"file_name":"src/kv.rs","byte_start":739,"byte_end":760,"line_start":31,"line_end":31,"column_start":5,"column_end":26}},{"value":"/ ","span":{"file_name":"src/kv.rs","byte_start":765,"byte_end":769,"line_start":32,"line_end":32,"column_start":5,"column_end":9}},{"value":"/ let mut kvstore = KvStore::new();","span":{"file_name":"src/kv.rs","byte_start":774,"byte_end":811,"line_start":33,"line_end":33,"column_start":5,"column_end":42}},{"value":"/ kvstore.set(\"key01\".to_owned(), \"value01\".to_owned());","span":{"file_name":"src/kv.rs","byte_start":816,"byte_end":874,"line_start":34,"line_end":34,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(kvstore.get(\"key01\".to_owned()), Some(\"value01\".to_owned()));","span":{"file_name":"src/kv.rs","byte_start":879,"byte_end":955,"line_start":35,"line_end":35,"column_start":5,"column_end":81}},{"value":"/ kvstore.set(\"key01\".to_owned(), \"value02\".to_owned());","span":{"file_name":"src/kv.rs","byte_start":960,"byte_end":1018,"line_start":36,"line_end":36,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(kvstore.get(\"key01\".to_owned()), Some(\"value02\".to_owned()));","span":{"file_name":"src/kv.rs","byte_start":1023,"byte_end":1099,"line_start":37,"line_end":37,"column_start":5,"column_end":81}},{"value":"/ ```","span":{"file_name":"src/kv.rs","byte_start":1104,"byte_end":1111,"line_start":38,"line_end":38,"column_start":5,"column_end":12}}]},{"kind":"Local","id":{"krate":0,"index":4294967224},"span":{"file_name":"src/kv.rs","byte_start":1680,"byte_end":1684,"line_start":56,"line_end":56,"column_start":17,"column_end":21},"name":"self","qualname":"<KvStore>::get::self","value":"&kv::KvStore","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Local","id":{"krate":0,"index":4294967220},"span":{"file_name":"src/kv.rs","byte_start":1686,"byte_end":1689,"line_start":56,"line_end":56,"column_start":23,"column_end":26},"name":"key","qualname":"<KvStore>::get::key","value":"std::string::String","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":11},"span":{"file_name":"src/kv.rs","byte_start":1675,"byte_end":1678,"line_start":56,"line_end":56,"column_start":12,"column_end":15},"name":"get","qualname":"<KvStore>::get","value":"fn (&self, key: String) -> Option<String>","parent":null,"children":[],"decl_id":null,"docs":" This method used to get a value of the key in the Option.\n Key not been set will return None\n \n # Example\n \n ```rust\n use kvs::KvStore;\n \n let mut kvstore = KvStore::new();\n kvstore.set(\"key01\".to_owned(), \"value01\".to_owned());\n assert_eq!(kvstore.get(\"key01\".to_owned()), Some(\"value01\".to_owned()));\n assert_eq!(kvstore.get(\"key02\".to_owned()), None);\n ```\n","sig":null,"attributes":[{"value":"/ This method used to get a value of the key in the Option.","span":{"file_name":"src/kv.rs","byte_start":1216,"byte_end":1277,"line_start":43,"line_end":43,"column_start":5,"column_end":66}},{"value":"/ Key not been set will return None","span":{"file_name":"src/kv.rs","byte_start":1282,"byte_end":1319,"line_start":44,"line_end":44,"column_start":5,"column_end":42}},{"value":"/ ","span":{"file_name":"src/kv.rs","byte_start":1324,"byte_end":1328,"line_start":45,"line_end":45,"column_start":5,"column_end":9}},{"value":"/ # Example","span":{"file_name":"src/kv.rs","byte_start":1333,"byte_end":1346,"line_start":46,"line_end":46,"column_start":5,"column_end":18}},{"value":"/ ","span":{"file_name":"src/kv.rs","byte_start":1351,"byte_end":1355,"line_start":47,"line_end":47,"column_start":5,"column_end":9}},{"value":"/ ```rust","span":{"file_name":"src/kv.rs","byte_start":1360,"byte_end":1371,"line_start":48,"line_end":48,"column_start":5,"column_end":16}},{"value":"/ use kvs::KvStore;","span":{"file_name":"src/kv.rs","byte_start":1376,"byte_end":1397,"line_start":49,"line_end":49,"column_start":5,"column_end":26}},{"value":"/ ","span":{"file_name":"src/kv.rs","byte_start":1402,"byte_end":1406,"line_start":50,"line_end":50,"column_start":5,"column_end":9}},{"value":"/ let mut kvstore = KvStore::new();","span":{"file_name":"src/kv.rs","byte_start":1411,"byte_end":1448,"line_start":51,"line_end":51,"column_start":5,"column_end":42}},{"value":"/ kvstore.set(\"key01\".to_owned(), \"value01\".to_owned());","span":{"file_name":"src/kv.rs","byte_start":1453,"byte_end":1511,"line_start":52,"line_end":52,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(kvstore.get(\"key01\".to_owned()), Some(\"value01\".to_owned()));","span":{"file_name":"src/kv.rs","byte_start":1516,"byte_end":1592,"line_start":53,"line_end":53,"column_start":5,"column_end":81}},{"value":"/ assert_eq!(kvstore.get(\"key02\".to_owned()), None);","span":{"file_name":"src/kv.rs","byte_start":1597,"byte_end":1651,"line_start":54,"line_end":54,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"src/kv.rs","byte_start":1656,"byte_end":1663,"line_start":55,"line_end":55,"column_start":5,"column_end":12}}]},{"kind":"Local","id":{"krate":0,"index":4294967200},"span":{"file_name":"src/kv.rs","byte_start":2231,"byte_end":2235,"line_start":73,"line_end":73,"column_start":24,"column_end":28},"name":"self","qualname":"<KvStore>::remove::self","value":"&mut kv::KvStore","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Local","id":{"krate":0,"index":4294967196},"span":{"file_name":"src/kv.rs","byte_start":2237,"byte_end":2240,"line_start":73,"line_end":73,"column_start":30,"column_end":33},"name":"key","qualname":"<KvStore>::remove::key","value":"std::string::String","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":12},"span":{"file_name":"src/kv.rs","byte_start":2219,"byte_end":2225,"line_start":73,"line_end":73,"column_start":12,"column_end":18},"name":"remove","qualname":"<KvStore>::remove","value":"fn (&mut self, key: String) -> ()","parent":null,"children":[],"decl_id":null,"docs":" This method used to remove a key-value pair.alloc\n \n # Example\n \n ```rust\n use kvs::KvStore;\n \n let mut kvstore = KvStore::new();\n kvstore.set(\"key01\".to_owned(), \"value01\".to_owned());\n assert_eq!(kvstore.get(\"key01\".to_owned()), Some(\"value01\".to_owned()));\n kvstore.remove(\"key01\".to_owned());\n assert_eq!(kvstore.get(\"key01\".to_owned()), None);\n ```\n","sig":null,"attributes":[{"value":"/ This method used to remove a key-value pair.alloc","span":{"file_name":"src/kv.rs","byte_start":1766,"byte_end":1819,"line_start":60,"line_end":60,"column_start":5,"column_end":58}},{"value":"/ ","span":{"file_name":"src/kv.rs","byte_start":1824,"byte_end":1828,"line_start":61,"line_end":61,"column_start":5,"column_end":9}},{"value":"/ # Example","span":{"file_name":"src/kv.rs","byte_start":1833,"byte_end":1846,"line_start":62,"line_end":62,"column_start":5,"column_end":18}},{"value":"/ ","span":{"file_name":"src/kv.rs","byte_start":1851,"byte_end":1855,"line_start":63,"line_end":63,"column_start":5,"column_end":9}},{"value":"/ ```rust","span":{"file_name":"src/kv.rs","byte_start":1860,"byte_end":1871,"line_start":64,"line_end":64,"column_start":5,"column_end":16}},{"value":"/ use kvs::KvStore;","span":{"file_name":"src/kv.rs","byte_start":1876,"byte_end":1897,"line_start":65,"line_end":65,"column_start":5,"column_end":26}},{"value":"/ ","span":{"file_name":"src/kv.rs","byte_start":1902,"byte_end":1906,"line_start":66,"line_end":66,"column_start":5,"column_end":9}},{"value":"/ let mut kvstore = KvStore::new();","span":{"file_name":"src/kv.rs","byte_start":1911,"byte_end":1948,"line_start":67,"line_end":67,"column_start":5,"column_end":42}},{"value":"/ kvstore.set(\"key01\".to_owned(), \"value01\".to_owned());","span":{"file_name":"src/kv.rs","byte_start":1953,"byte_end":2011,"line_start":68,"line_end":68,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(kvstore.get(\"key01\".to_owned()), Some(\"value01\".to_owned()));","span":{"file_name":"src/kv.rs","byte_start":2016,"byte_end":2092,"line_start":69,"line_end":69,"column_start":5,"column_end":81}},{"value":"/ kvstore.remove(\"key01\".to_owned());","span":{"file_name":"src/kv.rs","byte_start":2097,"byte_end":2136,"line_start":70,"line_end":70,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(kvstore.get(\"key01\".to_owned()), None);","span":{"file_name":"src/kv.rs","byte_start":2141,"byte_end":2195,"line_start":71,"line_end":71,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"src/kv.rs","byte_start":2200,"byte_end":2207,"line_start":72,"line_end":72,"column_start":5,"column_end":12}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"src/kv.rs","byte_start":277,"byte_end":284,"line_start":9,"line_end":9,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"src/lib.rs","byte_start":77,"byte_end":79,"line_start":3,"line_end":3,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":4}},{"kind":"Mod","span":{"file_name":"src/lib.rs","byte_start":95,"byte_end":97,"line_start":5,"line_end":5,"column_start":5,"column_end":7},"ref_id":{"krate":0,"index":4}},{"kind":"Mod","span":{"file_name":"src/kv.rs","byte_start":103,"byte_end":106,"line_start":1,"line_end":1,"column_start":5,"column_end":8},"ref_id":{"krate":1,"index":0}},{"kind":"Mod","span":{"file_name":"src/kv.rs","byte_start":108,"byte_end":119,"line_start":1,"line_end":1,"column_start":10,"column_end":21},"ref_id":{"krate":1,"index":567}},{"kind":"Type","span":{"file_name":"src/kv.rs","byte_start":244,"byte_end":251,"line_start":6,"line_end":6,"column_start":10,"column_end":17},"ref_id":{"krate":1,"index":6207}},{"kind":"Type","span":{"file_name":"src/kv.rs","byte_start":252,"byte_end":258,"line_start":6,"line_end":6,"column_start":18,"column_end":24},"ref_id":{"krate":5,"index":4732}},{"kind":"Type","span":{"file_name":"src/kv.rs","byte_start":260,"byte_end":266,"line_start":6,"line_end":6,"column_start":26,"column_end":32},"ref_id":{"krate":5,"index":4732}},{"kind":"Type","span":{"file_name":"src/kv.rs","byte_start":277,"byte_end":284,"line_start":9,"line_end":9,"column_start":6,"column_end":13},"ref_id":{"krate":0,"index":6}},{"kind":"Type","span":{"file_name":"src/kv.rs","byte_start":494,"byte_end":501,"line_start":19,"line_end":19,"column_start":21,"column_end":28},"ref_id":{"krate":0,"index":6}},{"kind":"Type","span":{"file_name":"src/kv.rs","byte_start":512,"byte_end":519,"line_start":20,"line_end":20,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":6}},{"kind":"Variable","span":{"file_name":"src/kv.rs","byte_start":534,"byte_end":537,"line_start":21,"line_end":21,"column_start":13,"column_end":16},"ref_id":{"krate":0,"index":7}},{"kind":"Function","span":{"file_name":"src/kv.rs","byte_start":548,"byte_end":551,"line_start":21,"line_end":21,"column_start":27,"column_end":30},"ref_id":{"krate":1,"index":609}},{"kind":"Type","span":{"file_name":"src/kv.rs","byte_start":539,"byte_end":546,"line_start":21,"line_end":21,"column_start":18,"column_end":25},"ref_id":{"krate":1,"index":6207}},{"kind":"Type","span":{"file_name":"src/kv.rs","byte_start":1143,"byte_end":1149,"line_start":39,"line_end":39,"column_start":32,"column_end":38},"ref_id":{"krate":5,"index":4732}},{"kind":"Type","span":{"file_name":"src/kv.rs","byte_start":1158,"byte_end":1164,"line_start":39,"line_end":39,"column_start":47,"column_end":53},"ref_id":{"krate":5,"index":4732}},{"kind":"Function","span":{"file_name":"src/kv.rs","byte_start":1185,"byte_end":1191,"line_start":40,"line_end":40,"column_start":18,"column_end":24},"ref_id":{"krate":1,"index":645}},{"kind":"Variable","span":{"file_name":"src/kv.rs","byte_start":1176,"byte_end":1180,"line_start":40,"line_end":40,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":4294967247}},{"kind":"Variable","span":{"file_name":"src/kv.rs","byte_start":1181,"byte_end":1184,"line_start":40,"line_end":40,"column_start":14,"column_end":17},"ref_id":{"krate":0,"index":7}},{"kind":"Variable","span":{"file_name":"src/kv.rs","byte_start":1192,"byte_end":1195,"line_start":40,"line_end":40,"column_start":25,"column_end":28},"ref_id":{"krate":0,"index":4294967243}},{"kind":"Variable","span":{"file_name":"src/kv.rs","byte_start":1197,"byte_end":1202,"line_start":40,"line_end":40,"column_start":30,"column_end":35},"ref_id":{"krate":0,"index":4294967239}},{"kind":"Type","span":{"file_name":"src/kv.rs","byte_start":1691,"byte_end":1697,"line_start":56,"line_end":56,"column_start":28,"column_end":34},"ref_id":{"krate":5,"index":4732}},{"kind":"Type","span":{"file_name":"src/kv.rs","byte_start":1702,"byte_end":1708,"line_start":56,"line_end":56,"column_start":39,"column_end":45},"ref_id":{"krate":2,"index":29311}},{"kind":"Type","span":{"file_name":"src/kv.rs","byte_start":1709,"byte_end":1715,"line_start":56,"line_end":56,"column_start":46,"column_end":52},"ref_id":{"krate":5,"index":4732}},{"kind":"Function","span":{"file_name":"src/kv.rs","byte_start":1746,"byte_end":1752,"line_start":57,"line_end":57,"column_start":28,"column_end":34},"ref_id":{"krate":2,"index":5147}},{"kind":"Function","span":{"file_name":"src/kv.rs","byte_start":1736,"byte_end":1739,"line_start":57,"line_end":57,"column_start":18,"column_end":21},"ref_id":{"krate":1,"index":637}},{"kind":"Variable","span":{"file_name":"src/kv.rs","byte_start":1727,"byte_end":1731,"line_start":57,"line_end":57,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":4294967224}},{"kind":"Variable","span":{"file_name":"src/kv.rs","byte_start":1732,"byte_end":1735,"line_start":57,"line_end":57,"column_start":14,"column_end":17},"ref_id":{"krate":0,"index":7}},{"kind":"Variable","span":{"file_name":"src/kv.rs","byte_start":1741,"byte_end":1744,"line_start":57,"line_end":57,"column_start":23,"column_end":26},"ref_id":{"krate":0,"index":4294967220}},{"kind":"Type","span":{"file_name":"src/kv.rs","byte_start":2242,"byte_end":2248,"line_start":73,"line_end":73,"column_start":35,"column_end":41},"ref_id":{"krate":5,"index":4732}},{"kind":"Function","span":{"file_name":"src/kv.rs","byte_start":2269,"byte_end":2275,"line_start":74,"line_end":74,"column_start":18,"column_end":24},"ref_id":{"krate":1,"index":646}},{"kind":"Variable","span":{"file_name":"src/kv.rs","byte_start":2260,"byte_end":2264,"line_start":74,"line_end":74,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":4294967200}},{"kind":"Variable","span":{"file_name":"src/kv.rs","byte_start":2265,"byte_end":2268,"line_start":74,"line_end":74,"column_start":14,"column_end":17},"ref_id":{"krate":0,"index":7}},{"kind":"Variable","span":{"file_name":"src/kv.rs","byte_start":2277,"byte_end":2280,"line_start":74,"line_end":74,"column_start":26,"column_end":29},"ref_id":{"krate":0,"index":4294967196}}],"macro_refs":[],"relations":[{"span":{"file_name":"src/kv.rs","byte_start":277,"byte_end":284,"line_start":9,"line_end":9,"column_start":6,"column_end":13},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":6},"to":{"krate":4294967295,"index":4294967295}}]}